// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Remoni.API.DataAccess.Client
{
    using Models;

    /// <summary>
    /// Gateways operations.
    /// </summary>
    public partial interface IGateways
    {
        /// <summary>
        /// Get all Gateways
        /// </summary>
        /// <param name='orderby'>
        /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result
        /// in ascending order by the supplied
        /// property.&lt;/p&gt;&lt;p&gt;Valid values are:
        /// &lt;strong&gt;GatewayId&lt;/strong&gt; (default),
        /// &lt;strong&gt;LastActivity&lt;/strong&gt;,
        /// &lt;strong&gt;Name&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
        /// &lt;strong&gt;orderby&lt;/strong&gt; and
        /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually
        /// exclusive.&lt;/p&gt;
        /// </param>
        /// <param name='orderbydesc'>
        /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result
        /// in descending order by the supplied
        /// property.&lt;/p&gt;&lt;p&gt;Valid values are:
        /// &lt;strong&gt;GatewayId&lt;/strong&gt; (default),
        /// &lt;strong&gt;LastActivity&lt;/strong&gt;,
        /// &lt;strong&gt;Name&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
        /// &lt;strong&gt;orderby&lt;/strong&gt; and
        /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually
        /// exclusive.&lt;/p&gt;
        /// </param>
        /// <param name='accountAccountId'>
        /// &lt;p&gt;&lt;a href="#queryoptions"&gt;Filters&lt;/a&gt; the
        /// result by Account.AccountId using the supplied operation and
        /// value.&lt;/p&gt;&lt;p&gt;Valid operations are:
        /// &lt;strong&gt;eq(int)&lt;/strong&gt;&lt;/p&gt;
        /// </param>
        /// <param name='top'>
        /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Returns the
        /// maximum number of entities. Default and max value is 10000
        /// </param>
        /// <param name='skip'>
        /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Skips this
        /// number of entities
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object,GatewaysGetCollectionAsyncByqueryOptionsHeaders>> GetCollectionAsyncByqueryOptionsWithHttpMessagesAsync(string orderby = "GatewayId", string orderbydesc = default(string), string accountAccountId = default(string), int? top = 10000, int? skip = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new Gateway
        /// </summary>
        /// <param name='newGateway'>
        /// The entity to create
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object,GatewaysPostBynewGatewayHeaders>> PostBynewGatewayWithHttpMessagesAsync(CreateGatewayDto newGateway, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Gateway by id
        /// </summary>
        /// <param name='id'>
        /// Id of entity to retrieve
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetAsyncByidWithHttpMessagesAsync(int id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Gateway by id
        /// </summary>
        /// <param name='id'>
        /// Id of entity to retrieve
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> DeleteAsyncByidWithHttpMessagesAsync(int id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a Gateway
        /// </summary>
        /// <param name='id'>
        /// The id of the Gateway
        /// </param>
        /// <param name='gateways'>
        /// The changes to apply
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> PatchAsyncByidgatewaysWithHttpMessagesAsync(int id, EditGatewayDto gateways, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}

// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Remoni.API.DataAccess.Client
{
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// The ReMoni API provides account related data and management options
    /// using HTTP requests. The API attempts to conform to the design
    /// principles of Representational State Transfer (REST) and is using
    /// JSON data format for request- and response payload. This document is
    /// intended for developers with basic REST knockledge
    /// </summary>
    public partial class RemoniAPIClient : Microsoft.Rest.ServiceClient<RemoniAPIClient>, IRemoniAPIClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Gets the IAccounts.
        /// </summary>
        public virtual IAccounts Accounts { get; private set; }

        /// <summary>
        /// Gets the IAlarmGroups.
        /// </summary>
        public virtual IAlarmGroups AlarmGroups { get; private set; }

        /// <summary>
        /// Gets the IAlarms.
        /// </summary>
        public virtual IAlarms Alarms { get; private set; }

        /// <summary>
        /// Gets the IAlarmTypes.
        /// </summary>
        public virtual IAlarmTypes AlarmTypes { get; private set; }

        /// <summary>
        /// Gets the IAlarmUserNotes.
        /// </summary>
        public virtual IAlarmUserNotes AlarmUserNotes { get; private set; }

        /// <summary>
        /// Gets the IData.
        /// </summary>
        public virtual IData Data { get; private set; }

        /// <summary>
        /// Gets the IDataTypes.
        /// </summary>
        public virtual IDataTypes DataTypes { get; private set; }

        /// <summary>
        /// Gets the IGateways.
        /// </summary>
        public virtual IGateways Gateways { get; private set; }

        /// <summary>
        /// Gets the IRoles.
        /// </summary>
        public virtual IRoles Roles { get; private set; }

        /// <summary>
        /// Gets the ISensors.
        /// </summary>
        public virtual ISensors Sensors { get; private set; }

        /// <summary>
        /// Gets the ITags.
        /// </summary>
        public virtual ITags Tags { get; private set; }

        /// <summary>
        /// Gets the IUnits.
        /// </summary>
        public virtual IUnits Units { get; private set; }

        /// <summary>
        /// Gets the IUnitTypes.
        /// </summary>
        public virtual IUnitTypes UnitTypes { get; private set; }

        /// <summary>
        /// Gets the IUsers.
        /// </summary>
        public virtual IUsers Users { get; private set; }

        /// <summary>
        /// Initializes a new instance of the RemoniAPIClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public RemoniAPIClient(params System.Net.Http.DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the RemoniAPIClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public RemoniAPIClient(System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the RemoniAPIClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RemoniAPIClient(System.Uri baseUri, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the RemoniAPIClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RemoniAPIClient(System.Uri baseUri, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary> 
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.Accounts = new Accounts(this);
            this.AlarmGroups = new AlarmGroups(this);
            this.Alarms = new Alarms(this);
            this.AlarmTypes = new AlarmTypes(this);
            this.AlarmUserNotes = new AlarmUserNotes(this);
            this.Data = new Data(this);
            this.DataTypes = new DataTypes(this);
            this.Gateways = new Gateways(this);
            this.Roles = new Roles(this);
            this.Sensors = new Sensors(this);
            this.Tags = new Tags(this);
            this.Units = new Units(this);
            this.UnitTypes = new UnitTypes(this);
            this.Users = new Users(this);
            this.BaseUri = new System.Uri("https://api.remoni.com/v1");
            SerializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new  System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }    
    }
}

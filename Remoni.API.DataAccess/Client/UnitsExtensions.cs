// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Remoni.API.DataAccess.Client
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for Units.
    /// </summary>
    public static partial class UnitsExtensions
    {
            /// <summary>
            /// Get all Units
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderby'>
            /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result in
            /// ascending order by the supplied property.&lt;/p&gt;&lt;p&gt;Valid values
            /// are: &lt;strong&gt;UnitId&lt;/strong&gt; (default),
            /// &lt;strong&gt;Name&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
            /// &lt;strong&gt;orderby&lt;/strong&gt; and
            /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually exclusive.&lt;/p&gt;
            /// </param>
            /// <param name='orderbydesc'>
            /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result in
            /// descending order by the supplied property.&lt;/p&gt;&lt;p&gt;Valid values
            /// are: &lt;strong&gt;UnitId&lt;/strong&gt; (default),
            /// &lt;strong&gt;Name&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
            /// &lt;strong&gt;orderby&lt;/strong&gt; and
            /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually exclusive.&lt;/p&gt;
            /// </param>
            /// <param name='accountAccountId'>
            /// &lt;p&gt;&lt;a href="#queryoptions"&gt;Filters&lt;/a&gt; the result by
            /// Account.AccountId using the supplied operation and
            /// value.&lt;/p&gt;&lt;p&gt;Valid operations are:
            /// &lt;strong&gt;eq(int)&lt;/strong&gt;&lt;/p&gt;
            /// </param>
            /// <param name='unitTypeUnitTypeId'>
            /// &lt;p&gt;&lt;a href="#queryoptions"&gt;Filters&lt;/a&gt; the result by
            /// UnitType.UnitTypeId using the supplied operation and
            /// value.&lt;/p&gt;&lt;p&gt;Valid operations are:
            /// &lt;strong&gt;eq(int)&lt;/strong&gt;&lt;/p&gt;
            /// </param>
            /// <param name='top'>
            /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Returns the maximum
            /// number of entities. Default and max value is 10000
            /// </param>
            /// <param name='skip'>
            /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Skips this number of
            /// entities
            /// </param>
            public static object GetCollectionAsyncByqueryOptions(this IUnits operations, string orderby = "UnitId", string orderbydesc = default(string), string accountAccountId = default(string), string unitTypeUnitTypeId = default(string), int? top = 10000, int? skip = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUnits)s).GetCollectionAsyncByqueryOptionsAsync(orderby, orderbydesc, accountAccountId, unitTypeUnitTypeId, top, skip), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Units
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderby'>
            /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result in
            /// ascending order by the supplied property.&lt;/p&gt;&lt;p&gt;Valid values
            /// are: &lt;strong&gt;UnitId&lt;/strong&gt; (default),
            /// &lt;strong&gt;Name&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
            /// &lt;strong&gt;orderby&lt;/strong&gt; and
            /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually exclusive.&lt;/p&gt;
            /// </param>
            /// <param name='orderbydesc'>
            /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result in
            /// descending order by the supplied property.&lt;/p&gt;&lt;p&gt;Valid values
            /// are: &lt;strong&gt;UnitId&lt;/strong&gt; (default),
            /// &lt;strong&gt;Name&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
            /// &lt;strong&gt;orderby&lt;/strong&gt; and
            /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually exclusive.&lt;/p&gt;
            /// </param>
            /// <param name='accountAccountId'>
            /// &lt;p&gt;&lt;a href="#queryoptions"&gt;Filters&lt;/a&gt; the result by
            /// Account.AccountId using the supplied operation and
            /// value.&lt;/p&gt;&lt;p&gt;Valid operations are:
            /// &lt;strong&gt;eq(int)&lt;/strong&gt;&lt;/p&gt;
            /// </param>
            /// <param name='unitTypeUnitTypeId'>
            /// &lt;p&gt;&lt;a href="#queryoptions"&gt;Filters&lt;/a&gt; the result by
            /// UnitType.UnitTypeId using the supplied operation and
            /// value.&lt;/p&gt;&lt;p&gt;Valid operations are:
            /// &lt;strong&gt;eq(int)&lt;/strong&gt;&lt;/p&gt;
            /// </param>
            /// <param name='top'>
            /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Returns the maximum
            /// number of entities. Default and max value is 10000
            /// </param>
            /// <param name='skip'>
            /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Skips this number of
            /// entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetCollectionAsyncByqueryOptionsAsync(this IUnits operations, string orderby = "UnitId", string orderbydesc = default(string), string accountAccountId = default(string), string unitTypeUnitTypeId = default(string), int? top = 10000, int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCollectionAsyncByqueryOptionsWithHttpMessagesAsync(orderby, orderbydesc, accountAccountId, unitTypeUnitTypeId, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new Unit, WriteUnit permission required, Draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='unit'>
            /// The entity to create
            /// </param>
            public static object PostAsyncByunit(this IUnits operations, CreateUnitDto unit)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUnits)s).PostAsyncByunitAsync(unit), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new Unit, WriteUnit permission required, Draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='unit'>
            /// The entity to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PostAsyncByunitAsync(this IUnits operations, CreateUnitDto unit, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PostAsyncByunitWithHttpMessagesAsync(unit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Unit by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of entity to retrieve
            /// </param>
            public static object GetAsyncByid(this IUnits operations, int id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUnits)s).GetAsyncByidAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Unit by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of entity to retrieve
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetAsyncByidAsync(this IUnits operations, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAsyncByidWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Unit by id, draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of entity to delete
            /// </param>
            public static object DeleteAsyncByid(this IUnits operations, int id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUnits)s).DeleteAsyncByidAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Unit by id, draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of entity to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> DeleteAsyncByidAsync(this IUnits operations, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteAsyncByidWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a Unit, WriteUnit permission required, Draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id the entity to update
            /// </param>
            /// <param name='unit'>
            /// The entity to update
            /// </param>
            public static object PatchAsyncByidunit(this IUnits operations, int id, EditUnitDto unit)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUnits)s).PatchAsyncByidunitAsync(id, unit), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Unit, WriteUnit permission required, Draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id the entity to update
            /// </param>
            /// <param name='unit'>
            /// The entity to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PatchAsyncByidunitAsync(this IUnits operations, int id, EditUnitDto unit, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PatchAsyncByidunitWithHttpMessagesAsync(id, unit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Unit Image by UnitId, draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the unit entity
            /// </param>
            public static object GetImageAsyncByid(this IUnits operations, int id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUnits)s).GetImageAsyncByidAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Unit Image by UnitId, draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the unit entity
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetImageAsyncByidAsync(this IUnits operations, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetImageAsyncByidWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add or replace Unit Image by UnitId, draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the unit entity
            /// </param>
            /// <param name='file'>
            /// The image file to upload
            /// </param>
            public static object PutImageAsyncByidfile(this IUnits operations, int id, System.IO.Stream file)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUnits)s).PutImageAsyncByidfileAsync(id, file), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add or replace Unit Image by UnitId, draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the unit entity
            /// </param>
            /// <param name='file'>
            /// The image file to upload
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PutImageAsyncByidfileAsync(this IUnits operations, int id, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PutImageAsyncByidfileWithHttpMessagesAsync(id, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Unit Image by UnitId, draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the unit entity
            /// </param>
            public static object DeleteImageAsyncByid(this IUnits operations, int id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUnits)s).DeleteImageAsyncByidAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Unit Image by UnitId, draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the unit entity
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> DeleteImageAsyncByidAsync(this IUnits operations, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteImageAsyncByidWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates the tag if it does not exist and adds a Tag reference to the unit,
            /// Draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the Unit
            /// </param>
            /// <param name='newTag'>
            /// The tag to create or reference
            /// </param>
            public static object PostTagAsyncByidnewTag(this IUnits operations, int id, CreateTagDto newTag)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUnits)s).PostTagAsyncByidnewTagAsync(id, newTag), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the tag if it does not exist and adds a Tag reference to the unit,
            /// Draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the Unit
            /// </param>
            /// <param name='newTag'>
            /// The tag to create or reference
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PostTagAsyncByidnewTagAsync(this IUnits operations, int id, CreateTagDto newTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PostTagAsyncByidnewTagWithHttpMessagesAsync(id, newTag, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the tag reference to the unit and deletes the Tag if it's not
            /// references by any unit, Draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the entity to delete
            /// </param>
            /// <param name='tag'>
            /// The tag text to delete
            /// </param>
            public static object DeleteTagAsyncByidtag(this IUnits operations, int id, string tag)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUnits)s).DeleteTagAsyncByidtagAsync(id, tag), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the tag reference to the unit and deletes the Tag if it's not
            /// references by any unit, Draft
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the entity to delete
            /// </param>
            /// <param name='tag'>
            /// The tag text to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> DeleteTagAsyncByidtagAsync(this IUnits operations, int id, string tag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteTagAsyncByidtagWithHttpMessagesAsync(id, tag, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resets the algoritm for a specific alarmsubtype and unit
            /// </summary>
            /// <remarks>
            /// This option resets the unit behaviour used in the alarm algoritms and
            /// resets it by using the recent unit data and behaviour
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the unit
            /// </param>
            /// <param name='alarmTypeId'>
            /// Id of the alarm type
            /// </param>
            public static object ResetAlarmByidalarmTypeId(this IUnits operations, int id, int alarmTypeId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUnits)s).ResetAlarmByidalarmTypeIdAsync(id, alarmTypeId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the algoritm for a specific alarmsubtype and unit
            /// </summary>
            /// <remarks>
            /// This option resets the unit behaviour used in the alarm algoritms and
            /// resets it by using the recent unit data and behaviour
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the unit
            /// </param>
            /// <param name='alarmTypeId'>
            /// Id of the alarm type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ResetAlarmByidalarmTypeIdAsync(this IUnits operations, int id, int alarmTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ResetAlarmByidalarmTypeIdWithHttpMessagesAsync(id, alarmTypeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates (or overwrites) the alarm configuration for an alarmtype and unit
            /// (Draft)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the Unit
            /// </param>
            /// <param name='key'>
            /// Configuration key
            /// </param>
            /// <param name='value'>
            /// Configuration value
            /// </param>
            public static object AlarmConfigurationAsyncByidkeyvalue(this IUnits operations, int id, string key, string value = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUnits)s).AlarmConfigurationAsyncByidkeyvalueAsync(id, key, value), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates (or overwrites) the alarm configuration for an alarmtype and unit
            /// (Draft)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the Unit
            /// </param>
            /// <param name='key'>
            /// Configuration key
            /// </param>
            /// <param name='value'>
            /// Configuration value
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> AlarmConfigurationAsyncByidkeyvalueAsync(this IUnits operations, int id, string key, string value = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AlarmConfigurationAsyncByidkeyvalueWithHttpMessagesAsync(id, key, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the alarm configurations for an alarmtype and unit
            /// (Draft)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the Unit
            /// </param>
            public static object GetAlarmConfigurationAsyncByid(this IUnits operations, int id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUnits)s).GetAlarmConfigurationAsyncByidAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the alarm configurations for an alarmtype and unit
            /// (Draft)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the Unit
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetAlarmConfigurationAsyncByidAsync(this IUnits operations, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAlarmConfigurationAsyncByidWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

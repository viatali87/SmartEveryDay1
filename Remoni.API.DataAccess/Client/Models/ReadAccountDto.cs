// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Remoni.API.DataAccess.Client.Models
{
    using System.Linq;

    public partial class ReadAccountDto
    {
        /// <summary>
        /// Initializes a new instance of the ReadAccountDto class.
        /// </summary>
        public ReadAccountDto() { }

        /// <summary>
        /// Initializes a new instance of the ReadAccountDto class.
        /// </summary>
        public ReadAccountDto(int accountId, string name, string address, string billingAddress = default(string), System.Collections.Generic.IList<ReadUserRolesDto> userRoles = default(System.Collections.Generic.IList<ReadUserRolesDto>))
        {
            AccountId = accountId;
            Name = name;
            Address = address;
            BillingAddress = billingAddress;
            UserRoles = userRoles;
        }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "AccountId")]
        public int AccountId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Address")]
        public string Address { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "BillingAddress")]
        public string BillingAddress { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "UserRoles")]
        public System.Collections.Generic.IList<ReadUserRolesDto> UserRoles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (Address == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Address");
            }
            if (this.UserRoles != null)
            {
                foreach (var element in this.UserRoles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}

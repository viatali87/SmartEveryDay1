// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Remoni.API.DataAccess.Client
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for Users.
    /// </summary>
    public static partial class UsersExtensions
    {
            /// <summary>
            /// Get users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderby'>
            /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result in
            /// ascending order by the supplied property.&lt;/p&gt;&lt;p&gt;Valid values
            /// are: &lt;strong&gt;UserId&lt;/strong&gt; (default),
            /// &lt;strong&gt;Name&lt;/strong&gt;,
            /// &lt;strong&gt;Email&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
            /// &lt;strong&gt;orderby&lt;/strong&gt; and
            /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually exclusive.&lt;/p&gt;
            /// </param>
            /// <param name='orderbydesc'>
            /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result in
            /// descending order by the supplied property.&lt;/p&gt;&lt;p&gt;Valid values
            /// are: &lt;strong&gt;UserId&lt;/strong&gt; (default),
            /// &lt;strong&gt;Name&lt;/strong&gt;,
            /// &lt;strong&gt;Email&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
            /// &lt;strong&gt;orderby&lt;/strong&gt; and
            /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually exclusive.&lt;/p&gt;
            /// </param>
            /// <param name='email'>
            /// &lt;p&gt;&lt;a href="#queryoptions"&gt;Filters&lt;/a&gt; the result by
            /// Email using the supplied operation and value.&lt;/p&gt;&lt;p&gt;Valid
            /// operations are: &lt;strong&gt;eq(string)&lt;/strong&gt;&lt;/p&gt;
            /// </param>
            /// <param name='accountAccountId'>
            /// &lt;p&gt;&lt;a href="#queryoptions"&gt;Filters&lt;/a&gt; the result by
            /// Account.AccountId using the supplied operation and
            /// value.&lt;/p&gt;&lt;p&gt;Valid operations are:
            /// &lt;strong&gt;eq(int)&lt;/strong&gt;&lt;/p&gt;
            /// </param>
            /// <param name='top'>
            /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Returns the maximum
            /// number of entities. Default and max value is 10000
            /// </param>
            /// <param name='skip'>
            /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Skips this number of
            /// entities
            /// </param>
            public static object GetCollectionAsyncByqueryOptions(this IUsers operations, string orderby = "UserId", string orderbydesc = default(string), string email = default(string), string accountAccountId = default(string), int? top = 10000, int? skip = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsers)s).GetCollectionAsyncByqueryOptionsAsync(orderby, orderbydesc, email, accountAccountId, top, skip), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderby'>
            /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result in
            /// ascending order by the supplied property.&lt;/p&gt;&lt;p&gt;Valid values
            /// are: &lt;strong&gt;UserId&lt;/strong&gt; (default),
            /// &lt;strong&gt;Name&lt;/strong&gt;,
            /// &lt;strong&gt;Email&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
            /// &lt;strong&gt;orderby&lt;/strong&gt; and
            /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually exclusive.&lt;/p&gt;
            /// </param>
            /// <param name='orderbydesc'>
            /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result in
            /// descending order by the supplied property.&lt;/p&gt;&lt;p&gt;Valid values
            /// are: &lt;strong&gt;UserId&lt;/strong&gt; (default),
            /// &lt;strong&gt;Name&lt;/strong&gt;,
            /// &lt;strong&gt;Email&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
            /// &lt;strong&gt;orderby&lt;/strong&gt; and
            /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually exclusive.&lt;/p&gt;
            /// </param>
            /// <param name='email'>
            /// &lt;p&gt;&lt;a href="#queryoptions"&gt;Filters&lt;/a&gt; the result by
            /// Email using the supplied operation and value.&lt;/p&gt;&lt;p&gt;Valid
            /// operations are: &lt;strong&gt;eq(string)&lt;/strong&gt;&lt;/p&gt;
            /// </param>
            /// <param name='accountAccountId'>
            /// &lt;p&gt;&lt;a href="#queryoptions"&gt;Filters&lt;/a&gt; the result by
            /// Account.AccountId using the supplied operation and
            /// value.&lt;/p&gt;&lt;p&gt;Valid operations are:
            /// &lt;strong&gt;eq(int)&lt;/strong&gt;&lt;/p&gt;
            /// </param>
            /// <param name='top'>
            /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Returns the maximum
            /// number of entities. Default and max value is 10000
            /// </param>
            /// <param name='skip'>
            /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Skips this number of
            /// entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetCollectionAsyncByqueryOptionsAsync(this IUsers operations, string orderby = "UserId", string orderbydesc = default(string), string email = default(string), string accountAccountId = default(string), int? top = 10000, int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCollectionAsyncByqueryOptionsWithHttpMessagesAsync(orderby, orderbydesc, email, accountAccountId, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dto'>
            /// New user value
            /// </param>
            public static object PostBydto(this IUsers operations, WriteUserDto dto)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsers)s).PostBydtoAsync(dto), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dto'>
            /// New user value
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PostBydtoAsync(this IUsers operations, WriteUserDto dto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PostBydtoWithHttpMessagesAsync(dto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// The email of the user
            /// </param>
            public static object GetAsyncByemail(this IUsers operations, string email)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsers)s).GetAsyncByemailAsync(email), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// The email of the user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetAsyncByemailAsync(this IUsers operations, string email, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAsyncByemailWithHttpMessagesAsync(email, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// The email of the user
            /// </param>
            /// <param name='user'>
            /// New user value
            /// </param>
            public static object PatchByemailuser(this IUsers operations, string email, WriteUserDto user)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsers)s).PatchByemailuserAsync(email, user), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// The email of the user
            /// </param>
            /// <param name='user'>
            /// New user value
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PatchByemailuserAsync(this IUsers operations, string email, WriteUserDto user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PatchByemailuserWithHttpMessagesAsync(email, user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Request a password reset. An email will be sent to the user, with
            /// instructions on how to reset his password.
            /// Should be used both when then user has forgotten his password and need to
            /// pick a new one, and when the user
            /// is newly invited, and the link in the invitation email has expired (or the
            /// email is lost)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// The email of the user
            /// </param>
            public static object ResetPasswordByemail(this IUsers operations, string email)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsers)s).ResetPasswordByemailAsync(email), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Request a password reset. An email will be sent to the user, with
            /// instructions on how to reset his password.
            /// Should be used both when then user has forgotten his password and need to
            /// pick a new one, and when the user
            /// is newly invited, and the link in the invitation email has expired (or the
            /// email is lost)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// The email of the user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ResetPasswordByemailAsync(this IUsers operations, string email, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ResetPasswordByemailWithHttpMessagesAsync(email, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Request reset email. A verification email will be sent to the new email.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='dto'>
            /// The users' new email
            /// </param>
            public static object ResetEmailByemaildto(this IUsers operations, string email, NewEmailDto dto)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsers)s).ResetEmailByemaildtoAsync(email, dto), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Request reset email. A verification email will be sent to the new email.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='dto'>
            /// The users' new email
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ResetEmailByemaildtoAsync(this IUsers operations, string email, NewEmailDto dto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ResetEmailByemaildtoWithHttpMessagesAsync(email, dto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Complete registration of a new user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// The email of the user
            /// </param>
            /// <param name='dto'>
            /// The users' secret token, new name and new password
            /// </param>
            public static object CompleteRegistrationByemaildto(this IUsers operations, string email, CompleteUserRegistrationDto dto)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsers)s).CompleteRegistrationByemaildtoAsync(email, dto), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Complete registration of a new user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// The email of the user
            /// </param>
            /// <param name='dto'>
            /// The users' secret token, new name and new password
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> CompleteRegistrationByemaildtoAsync(this IUsers operations, string email, CompleteUserRegistrationDto dto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CompleteRegistrationByemaildtoWithHttpMessagesAsync(email, dto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set a new password for a user, using a previously requested token (sent to
            /// user by email)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// The email of the user
            /// </param>
            /// <param name='dto'>
            /// The users' secret token and new password
            /// </param>
            public static object PasswordByemaildto(this IUsers operations, string email, WriteNewPasswordDto dto)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsers)s).PasswordByemaildtoAsync(email, dto), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set a new password for a user, using a previously requested token (sent to
            /// user by email)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// The email of the user
            /// </param>
            /// <param name='dto'>
            /// The users' secret token and new password
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PasswordByemaildtoAsync(this IUsers operations, string email, WriteNewPasswordDto dto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PasswordByemaildtoWithHttpMessagesAsync(email, dto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dto'>
            /// The users' secret token
            /// </param>
            public static object NewEmailBydto(this IUsers operations, WriteNewEmailDto dto)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsers)s).NewEmailBydtoAsync(dto), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dto'>
            /// The users' secret token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> NewEmailBydtoAsync(this IUsers operations, WriteNewEmailDto dto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.NewEmailBydtoWithHttpMessagesAsync(dto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

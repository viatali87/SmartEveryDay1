// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Remoni.API.DataAccess.Client
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for Accounts.
    /// </summary>
    public static partial class AccountsExtensions
    {
            /// <summary>
            /// Get all Accounts, ReadAccount permission required
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderby'>
            /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result in
            /// ascending order by the supplied property.&lt;/p&gt;&lt;p&gt;Valid values
            /// are: &lt;strong&gt;AccountId&lt;/strong&gt; (default),
            /// &lt;strong&gt;Name&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
            /// &lt;strong&gt;orderby&lt;/strong&gt; and
            /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually exclusive.&lt;/p&gt;
            /// </param>
            /// <param name='orderbydesc'>
            /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result in
            /// descending order by the supplied property.&lt;/p&gt;&lt;p&gt;Valid values
            /// are: &lt;strong&gt;AccountId&lt;/strong&gt; (default),
            /// &lt;strong&gt;Name&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
            /// &lt;strong&gt;orderby&lt;/strong&gt; and
            /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually exclusive.&lt;/p&gt;
            /// </param>
            /// <param name='top'>
            /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Returns the maximum
            /// number of entities. Default and max value is 10000
            /// </param>
            /// <param name='skip'>
            /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Skips this number of
            /// entities
            /// </param>
            public static object GetCollectionAsyncByqueryOptions(this IAccounts operations, string orderby = "AccountId", string orderbydesc = default(string), int? top = 10000, int? skip = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccounts)s).GetCollectionAsyncByqueryOptionsAsync(orderby, orderbydesc, top, skip), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Accounts, ReadAccount permission required
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderby'>
            /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result in
            /// ascending order by the supplied property.&lt;/p&gt;&lt;p&gt;Valid values
            /// are: &lt;strong&gt;AccountId&lt;/strong&gt; (default),
            /// &lt;strong&gt;Name&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
            /// &lt;strong&gt;orderby&lt;/strong&gt; and
            /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually exclusive.&lt;/p&gt;
            /// </param>
            /// <param name='orderbydesc'>
            /// &lt;p&gt;&lt;a href='#queryoptions'&gt;Sorts&lt;/a&gt; the result in
            /// descending order by the supplied property.&lt;/p&gt;&lt;p&gt;Valid values
            /// are: &lt;strong&gt;AccountId&lt;/strong&gt; (default),
            /// &lt;strong&gt;Name&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:
            /// &lt;strong&gt;orderby&lt;/strong&gt; and
            /// &lt;strong&gt;orderbydesc&lt;/strong&gt; are mutually exclusive.&lt;/p&gt;
            /// </param>
            /// <param name='top'>
            /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Returns the maximum
            /// number of entities. Default and max value is 10000
            /// </param>
            /// <param name='skip'>
            /// &lt;a href="#queryoptions"&gt;Query paging&lt;/a&gt; Skips this number of
            /// entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetCollectionAsyncByqueryOptionsAsync(this IAccounts operations, string orderby = "AccountId", string orderbydesc = default(string), int? top = 10000, int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCollectionAsyncByqueryOptionsWithHttpMessagesAsync(orderby, orderbydesc, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new Account, WriteAccount permission required
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newAccount'>
            /// The entity to create
            /// </param>
            public static object PostAsyncBynewAccount(this IAccounts operations, WriteAccountDto newAccount)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccounts)s).PostAsyncBynewAccountAsync(newAccount), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new Account, WriteAccount permission required
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newAccount'>
            /// The entity to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PostAsyncBynewAccountAsync(this IAccounts operations, WriteAccountDto newAccount, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PostAsyncBynewAccountWithHttpMessagesAsync(newAccount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Account by id, ReadAccount permission required
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of entity to retrieve
            /// </param>
            public static object GetAsyncByid(this IAccounts operations, int id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccounts)s).GetAsyncByidAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Account by id, ReadAccount permission required
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of entity to retrieve
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetAsyncByidAsync(this IAccounts operations, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAsyncByidWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the account
            /// </param>
            /// <param name='dto'>
            /// New account value
            /// </param>
            public static object PatchByiddto(this IAccounts operations, int id, WriteAccountDto dto)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccounts)s).PatchByiddtoAsync(id, dto), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the account
            /// </param>
            /// <param name='dto'>
            /// New account value
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PatchByiddtoAsync(this IAccounts operations, int id, WriteAccountDto dto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PatchByiddtoWithHttpMessagesAsync(id, dto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grant a user a roll on the account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Account Id
            /// </param>
            /// <param name='dto'>
            /// </param>
            public static object PostUserAsyncByiddto(this IAccounts operations, int id, WriteUserRoleDto dto)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccounts)s).PostUserAsyncByiddtoAsync(id, dto), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grant a user a roll on the account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Account Id
            /// </param>
            /// <param name='dto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PostUserAsyncByiddtoAsync(this IAccounts operations, int id, WriteUserRoleDto dto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PostUserAsyncByiddtoWithHttpMessagesAsync(id, dto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Users on an account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Account Id
            /// </param>
            /// <param name='username'>
            /// The username(email) of the user to remove
            /// </param>
            /// <param name='role'>
            /// The role to remove the user from. Possible values include:
            /// 'Administrator', 'User', 'ReadOnly'
            /// </param>
            public static object DeleteUserAsyncByidusernamerole(this IAccounts operations, int id, string username, string role)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccounts)s).DeleteUserAsyncByidusernameroleAsync(id, username, role), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Users on an account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Account Id
            /// </param>
            /// <param name='username'>
            /// The username(email) of the user to remove
            /// </param>
            /// <param name='role'>
            /// The role to remove the user from. Possible values include:
            /// 'Administrator', 'User', 'ReadOnly'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> DeleteUserAsyncByidusernameroleAsync(this IAccounts operations, int id, string username, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteUserAsyncByidusernameroleWithHttpMessagesAsync(id, username, role, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

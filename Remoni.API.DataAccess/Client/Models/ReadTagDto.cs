// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Remoni.API.DataAccess.Client.Models
{
    using System.Linq;

    public partial class ReadTagDto
    {
        /// <summary>
        /// Initializes a new instance of the ReadTagDto class.
        /// </summary>
        public ReadTagDto() { }

        /// <summary>
        /// Initializes a new instance of the ReadTagDto class.
        /// </summary>
        public ReadTagDto(int tagId, string text, AccountNoRefsDto account, System.Collections.Generic.IList<UnitNoRefsDto> units = default(System.Collections.Generic.IList<UnitNoRefsDto>))
        {
            TagId = tagId;
            Text = text;
            Account = account;
            Units = units;
        }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "TagId")]
        public int TagId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Text")]
        public string Text { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Account")]
        public AccountNoRefsDto Account { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Units")]
        public System.Collections.Generic.IList<UnitNoRefsDto> Units { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Text == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Text");
            }
            if (Account == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Account");
            }
            if (this.Account != null)
            {
                this.Account.Validate();
            }
            if (this.Units != null)
            {
                foreach (var element in this.Units)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}

// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Remoni.API.DataAccess.Client.Models
{
    using System.Linq;

    public partial class GatewayActivitiesNoRefsDto
    {
        /// <summary>
        /// Initializes a new instance of the GatewayActivitiesNoRefsDto class.
        /// </summary>
        public GatewayActivitiesNoRefsDto() { }

        /// <summary>
        /// Initializes a new instance of the GatewayActivitiesNoRefsDto class.
        /// </summary>
        /// <param name="sensorType">Possible values include: 'AccessPoint',
        /// 'PowerMoniSpot', 'PowerMoniProC', 'FlowMoniSpot', 'FlowMoniPro',
        /// 'HeatMoniSpot', 'HeatMoniPro', 'TempMoniPro', 'RoomMoniSpot',
        /// 'RoomMoniPro', 'DataMoni'</param>
        public GatewayActivitiesNoRefsDto(int sensorId, int gatewayId, string sensorType, System.DateTimeOffset lastActivity, int? receivedSignalStrengthIndication = default(int?), int? linkQualityIndication = default(int?))
        {
            SensorId = sensorId;
            GatewayId = gatewayId;
            SensorType = sensorType;
            LastActivity = lastActivity;
            ReceivedSignalStrengthIndication = receivedSignalStrengthIndication;
            LinkQualityIndication = linkQualityIndication;
        }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SensorId")]
        public int SensorId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "GatewayId")]
        public int GatewayId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'AccessPoint',
        /// 'PowerMoniSpot', 'PowerMoniProC', 'FlowMoniSpot', 'FlowMoniPro',
        /// 'HeatMoniSpot', 'HeatMoniPro', 'TempMoniPro', 'RoomMoniSpot',
        /// 'RoomMoniPro', 'DataMoni'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SensorType")]
        public string SensorType { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "LastActivity")]
        public System.DateTimeOffset LastActivity { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ReceivedSignalStrengthIndication")]
        public int? ReceivedSignalStrengthIndication { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "LinkQualityIndication")]
        public int? LinkQualityIndication { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SensorType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SensorType");
            }
        }
    }
}
